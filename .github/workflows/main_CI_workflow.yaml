name: AI Track Java CI with Maven

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    #Local test Java + Build JAR file
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Maven Tests
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: mvn clean test

      - name: Build JAR
        run: |
          echo "Current working directory:"
          pwd 
          echo "Listing contents of current directory:"
          ls -la
          mvn clean package

  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensure build job completes successfully before deploy starts

    permissions:
      id-token: write #OIDC auth
      contents: read  # check code + task-definition file

    env:
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      AWS_REGION: us-east-1
      ECR_REPOSITORY: summer2025/ai_track_repo

      IMAGE_TAG: ${{ github.sha }}

      #ECS env config: appName-env-comName
      ECS_TASK_DEFINITION_FILE: ./.aws/ecs/task-definition.json
      ECS_CONTAINER_NAME: ai-track-app-main-service-container-1 # Name of the container in your task definition (from task-definition.json)

      ECS_CLUSTER_NAME: ai-track-app-fargate-cluster-1
      ECS_SERVICE_NAME: ai-track-app-service-1

    steps:
      # Build Java -jar package
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build JAR
        run: |
          echo "Current working directory:"
          pwd 
          echo "Listing contents of current directory:"
          ls -la
          mvn clean package

      # Configure AWS credentials using the OIDC role
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }} # Use the env variable defined above

      # Build and Push Docker Image -> ECR
      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Local build and tag Docker image
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Push Docker image -> Amazon ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # ECS Task Definition
      - name: Render Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}

          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # env -> task-definition
          environment-variables: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

      # Deploy to ECS Service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true